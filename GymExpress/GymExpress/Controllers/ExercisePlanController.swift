//
//  ExercisePlanController.swift
//  GymExpress
//
//  Created by Samuel Oliveira Martel on 2025-02-13.
//

import Foundation

class ExercisePlanController: ObservableObject {
    @Published var selectedType: String = "Musculation"
    @Published var selectedExercise: String? = nil
    @Published var series: String = ""
    @Published var reps: String = ""
    @Published var charge: String = ""
    @Published var repos: String = ""
    @Published var addedExercises: [Exercise] = []
    
    let exerciseLegends = ["Musculation", "Cardio", "Ã‰tirement", "Corps-poids"]
    
    let exercisesByType: [String: [String]] = [
        "Musculation": [
            "DÃ©veloppÃ© couchÃ©", "Squat", "SoulevÃ© de terre", "Tirage vertical", "DÃ©veloppÃ© militaire",
            "Curl biceps", "Extension triceps", "Fentes avec haltÃ¨res", "Rowing barre", "Presse Ã  jambes",
            "Ã‰lÃ©vations latÃ©rales", "Ã‰lÃ©vations frontales", "Pull-over", "Rowing haltÃ¨res", "Hip thrust",
            "Leg curl allongÃ©", "Leg extension", "Mollets debout Ã  la machine", "Mollets assis", "DÃ©veloppÃ© Arnold",
            "Pec deck (Butterfly)", "Poulie vis-Ã -vis", "Extension triceps Ã  la poulie", "Biceps curl Ã  la poulie",
            "Rowing assis Ã  la poulie", "Hack squat", "Leg press inclinÃ©e", "Machine Ã  adducteurs", "Machine Ã  abducteurs"
        ],
        "Cardio": [
            "Course sur tapis", "VÃ©lo stationnaire", "Rameur", "Escalier mÃ©canique", "Stepper",
            "Corde Ã  sauter", "HIIT sur vÃ©lo", "Elliptique", "Sprint sur tapis", "SkiErg",
            "Tapis inclinÃ©", "Air Bike", "Tapis de course auto-alimentÃ©", "Course en fractionnÃ© sur tapis"
        ],
        "Ã‰tirement": [
            "Ã‰tirement des ischio-jambiers sur banc", "Ã‰tirement du quadriceps debout avec appui",
            "Ã‰tirement des mollets sur step", "Ã‰tirement des pectoraux sur un cadre de porte",
            "Ã‰tirement du dos sur Swiss ball", "Rotation du tronc avec bÃ¢ton", "Ã‰tirement des Ã©paules avec Ã©lastique",
            "Ã‰tirement du cou assis", "Ã‰tirement des hanches sur tapis", "Ã‰tirement du piriforme sur banc",
            "Ã‰tirement du psoas avec appui", "Ã‰tirement des adducteurs assis", "Ã‰tirement du bas du dos sur tapis",
            "Ã‰tirement du grand dorsal en suspension", "Ã‰tirement du triceps derriÃ¨re la tÃªte",
            "Ã‰tirement des flÃ©chisseurs de hanche avec banc", "Ã‰tirement en papillon sur tapis",
            "Ã‰tirement du fessier sur banc", "Ã‰tirement du biceps avec barre"
        ],
        "Corps-poids": [
            "Pompes sur banc", "Squats sautÃ©s", "Planche sur Swiss ball", "Burpees avec slam ball",
            "Dips sur barres parallÃ¨les", "Mountain climbers sur tapis", "Fentes sautÃ©es avec step",
            "Gainage latÃ©ral avec disque", "Crunchs sur banc inclinÃ©", "Superman au sol",
            "Pont fessier lestÃ©", "Jump squats avec kettlebell", "Chaise contre le mur avec poids",
            "Pistol squat sur banc", "Pompes diamant sur step", "Russian twists avec medecine ball",
            "V-ups sur tapis", "Plank jacks avec sliders", "Crunchs lestÃ©s", "Planche avec TRX"
        ]
    ]

    
    // Convertit les exercices temporaires en ExerciseModel
    func getExerciseModels() -> [ExerciseModel] {
        print("ðŸ“Œ RÃ©cupÃ©ration des exercices : \(addedExercises.count) trouvÃ©s")
        
        return addedExercises.map { exercise in
            ExerciseModel(
                imageId: 1,
                description: exercise.name,
                bodyParts: 1,
                exerciseType: getExerciseTypeInt(selectedType),
                sets: Int(exercise.series) ?? 0,
                reps: Int(exercise.reps) ?? 0,
                charge: Int(exercise.charge) ?? 0
            )
        }
    }
    
    private func getExerciseTypeInt(_ type: String) -> Int {
        switch type {
            case "Musculation": return 1
            case "Cardio": return 2
            case "Ã‰tirement": return 3
            case "Corps-poids": return 4
            default: return 1
        }
    }
    
    func addExercise() {
        guard let exerciseName = selectedExercise, !series.isEmpty, !reps.isEmpty, !charge.isEmpty, !repos.isEmpty else {
            return
        }
        
        let newExercise = Exercise(name: exerciseName, series: series, reps: reps, charge: charge, repos: repos)
        addedExercises.append(newExercise)
        
        resetFields()
    }
    
    func removeExercise(_ exercise: Exercise) {
        addedExercises.removeAll { $0.id == exercise.id }
    }
    
    func resetFields() {
        selectedExercise = nil
        series = ""
        reps = ""
        charge = ""
        repos = ""
    }
    
    func clearExercises() {
        addedExercises.removeAll()
    }
}
